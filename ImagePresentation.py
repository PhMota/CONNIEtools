from __future__ import print_function
from Beamer import *
import os
import subprocess
from Timer import Timer
import sys

folder = 'ImagePresentation'

if not os.path.exists(folder):
    os.mkdir(folder)

def projections_slide( name, cmd ):
    scale = .3
    contents = ['projections of the raw image', doc.code( cmd, 'Bash') ]
    contents += [ doc.figure( name+'/median_o3_{}.pdf'.format(key), scale=scale ) for key in ['dataProj1', 'dataProj0', 'biasProj', 'vbiasProj' ] ]
    doc.frame( *contents )

with Timer('presentation'):
    with openBeamer( folder ) as doc:

        name = 'median'
        fname = r'/share/storage2/connie/data/runs/*/runID_*_03326_*_p*.fits.fz'
        cmd = 'python Image.py analyse {folder}/{name} "{fname}" --ohdu 3 --plot-sections --plot-spectrum'\
            .format( name=name, fname=fname, folder=folder)
        print( cmd )
        func = lambda: subprocess.call( [cmd], shell=True )
        
        doc.set_func(func)
        doc.frame('goal', 
                #doc.code( cmd, 'Bash'),
                doc.itemize(
                    'it is essencial to have a good control of the noise and dark current of the images since they affect directly detection threshold',
                    'a good understanding of the behavior of the dark current is paramount for an efficient event extraction focusing in reducing the fake events',
                    'hardware approach using skipper CCDs is underway which promises to decrease significantly the readout noise allowing the proper identification of the dark current',
                    'I have advanced in a parallel direction: developping tools to extract the maximum information from the existing images both 1x1 and 1x5',
                )
                )

        doc.frame('goal', 
                doc.itemize(
                    'analytically, I have derived the following relations\
                    $$m_1[{\\rm DC+Noise}] = g\lambda + \mu[{\\rm Noise}] $$\
                    $$m_2[{\\rm DC+Noise}] = g^2\lambda + \sigma[{\\rm Noise}]^2 $$\
                    $$m_3[{\\rm DC+Noise}] = g^3\lambda$$                   where $m_i$ are the $i$-th moments of the Poisson-Norm distribution corrected by its first moment, $\mu$ and $\sigma$ are the parameters of the Norm noise, $\lambda$ is the Poisson rate and $g$ is the convolution shift which physically controls how many ADUs the distribution is shifted by the presence of one electron (dark current), $g$ is the charge gain',
                    'these relations are redundant and can be used to attest the quality of the estimations',
                )
                )
        doc.frame('goal', 
                doc.itemize(
                    'in practice, we have to relate these quantities with sample estimations of the data',
                    'The straightforward associations are proposed in a first glance'+
                    '$$\mu[{\\rm Noise}] = {\\rm mean}[{\\rm OS}]$$'+
                    '$$\sigma[{\\rm Noise}]^2 = {\\rm var}[{\\rm OS}]$$'+
                    '$$m_1[{\\rm DC+Noise}] = {\\rm mean}[{\\rm AC}]$$'+
                    '$$m_2[{\\rm DC+Noise}] = {\\rm var}[{\\rm AC}]$$'+
                    '$$m_3[{\\rm DC+Noise}] = {\\rm mean}(X-{\\rm mean}[{\\rm AC}])^3$$'
                    ,
                    'however, the presence of modulations and other features of the image make weaken the quality of these estimations',
                    'furthermore, the presence of the data requires a careful analysis since all these quantites will be shifted by the data'
                )
                )

        doc.frame('goal', 
                'I focus in 3 parallel ways to tackle the problem',
                doc.itemize(
                    'correcting the image',
                    'using robust estimators',
                    'energy-independent separation of data and dark current',
                )
                )

        doc.frame('tool for image analysis', 
                'I have developed an user-friendly -- ask Carla ;-) -- tool for this analysis\n',
                'in fact, this presentation is can be generated by the tool\n',
                'sample call',
                doc.code( cmd, 'Bash'),
                'other functionalities',
                doc.itemize( 'read header', 'simulate and get params', 'extract hits (next week: comparison with offical extraction)' ),
                'run locally',
                doc.code( '\n'.join(( 'git init', 'git pull https://github.com/PhMota/CONNIEtools', 'python ImagePresentation.py' )), 'Bash' )
                )
        
        
        scaleSection = .6
        optsSection = [['data',1], ['bias',1], ['vbias',.7], ['dbias',.1] ]
        figsSection = lambda name,pre,optsSection=optsSection: [ doc.figure( name+'/{}_o3_{}.pdf'.format(pre,key), scale=x*scaleSection) for key, x in optsSection ]
        doc.frame('image imperfections', 
                doc.code( cmd, 'Bash'),
                doc.column(
                    doc.center( *figsSection('median', 'median') ),
                    '1x1 raw sections\n\n'+
                    'vertical modulation is clearly visible',
                    widths = [.6,-1]
                )
                )
        
        scaleProj = .25
        optsProj = ['dataProj1', 'dataProj0', 'biasProj', 'vbiasProj']
        figsProj = lambda name, pre: [ doc.figure( name+'/{}_o3_{}.pdf'.format(pre,key), scale=scaleProj ) for key in optsProj ]
        doc.frame('projections of the raw image', 
                doc.code( cmd, 'Bash'),
                doc.column(
                    doc.center( *figsProj('median', 'median') ),
                    'vertical modulation, horizontal modulation, hot columns\n\n\n',
                    widths = [.6,-1]
                ))

        doc.frame('projections of the raw image', 
                'the MonitorViewer tool attempts to circumvent these imperfections, by estimating the quantities independently for each line and taking the mean over these results\
                $$\sigma = {\\rm mean}({\\rm MAD}[{\\rm OS}]_i)$$\
                $$g\lambda = {\\rm mean}({\\rm median}[{\\rm AC}]_i - {\\rm median}[{\\rm OS}]_i )$$\
                $$g^2\lambda = {\\rm mean}({\\rm MAD}[{\\rm AC}]_i - {\\rm MAD}[{\\rm OS}]_i )$$',
                'these quantities give consistent estimations for simulations generated with no(!) data',
                )
        scaleSpectrum = .3
        optsSpectrum = ['data', 'bias', 'vbias', 'dbias']
        figsSpectrum = lambda name, pre, kind='_spectrum': [ doc.figure( name+'/{}_o3_{}{}.pdf'.format(pre,key,kind), scale=scaleSpectrum ) for key in optsSpectrum ]
        doc.frame('spectra of the raw image', 
                doc.code( cmd, 'Bash'),
                doc.column(
                    doc.center( *figsSpectrum('median', 'median') ),
                    'however, real distributions are crowded with outliers which heavily impair the capability of accurately estimating the parameters of the distribution',
                    widths = [.7,-1]))
                

        with Timer():
            name = 'mean'
            cmd = 'python Image.py analyse {folder}/{name} "{fname}" --ohdu 3 --params-mode mean --plot-sections --plot-spectrum'\
                .format(fname=fname, folder=folder, name=name)
            print( cmd )
            func = lambda: subprocess.call( [cmd], shell=True )

            doc.set_func(func)
            
            #doc.frame('Mean outliers analysis with line and col corrections', 
                    #'bash command',
                    #doc.code( cmd, 'Bash'),
                    #'parameters',
                    #doc.center( doc.table( file=name+'/mean_params.csv', fontsize=5, spacing=6, divide=2 ) ), 
                    #)

            doc.frame('sides with line and col corrections', 
                    doc.code( cmd, 'Bash'),
                    doc.column(
                        doc.center( *figsSection('mean', 'mean') ),
                        'perform overscan subtraction by estimating the mean of the distribution line by line after removing the outliers\n then remove the vertical overscan modulation',
                        widths = [.6, -1]
                        ))
            
            doc.frame('projections with line and col corrections', 
                    doc.code( cmd, 'Bash'),
                    doc.column(
                        doc.center( *figsProj('mean','mean') ),
                        'data becomes quite stable on both lines and columns',
                        widths = [.6,-1]
                        ))
            
            doc.frame('spectra with line and col corrections', 
                    doc.code( cmd, 'Bash'),
                    doc.column( 
                        doc.center( *figsSpectrum('mean','mean') ),
                        'this proceedure over the overscans succesfully removes their outliers allowing us to use redundant estimators to control the estimations',
                        widths = [.7,-1]
                        )
                    )


        with Timer():
            name = 'mean'
            cmd = 'python Image.py analyse {folder}/{name} "{fname}" --ohdu 3 --remove-hits 40 3 --params-mode mean --plot-sections --plot-spectrum'\
                .format(fname=fname, folder=folder, name=name)
            print( cmd )
            func = lambda: subprocess.call( [cmd], shell=True )
            doc.set_func(func)
            
            pre = 'mean_e40.0b3.0'
            
            figs = [ doc.figure( name+'/{}_o3_{}.pdf'.format(pre,key), scale=x*scaleSection) for key, x in optsSection ]
            doc.frame('removed above 40ADU with border 3',
                    doc.code( cmd, 'Bash'),
                    doc.column(
                        doc.center( *figsSection('mean', pre) ),
                        'in the data region we use a cluster removal algorithm and experiment with border of 3 pixels following the offical extractor approach',
                        widths = [.6,-1]
                        )
            )
            
            scale = .3
            noise = 14.44
            dc = 2.32
            dc2 = 15.24**2 - noise**2
            doc.frame('removed above 40ADU with border 3 spectra',
                    doc.code( cmd, 'Bash'),
                    doc.column(
                        doc.center( *figsSpectrum('mean', pre) ),
                        '$$\sigma={noise}$$\n\
                        $$g\lambda={dc}$$\n\
                        $$g^2\lambda={dc2:.2f}$$\n\
                        $$g={g:.2f}$$\n\
                        $$\lambda={lamb:.2f}$$\n'.format(noise=noise, dc=dc, dc2=dc2, g=dc2/dc, lamb=dc**2/dc2)
                        +
                        'perhaps 40ADU was too agressive since a large chunck of the Poisson-Norm distribution was also removed',
                        widths = [.7,-1]
                    )
            )
                    #thr  border noise dc
        thislist = [[60.0,   3.0, 14.4, 2.41, 15.39**2 - 14.5**2,  ], 
                    [80.0,   2.0, 14.4, 2.42, 15.39**2 - 14.5**2,  ],
                    [150.0,  0.0, 14.4, 2.72, 15.6**2 - 14.5**2,  ], 
                    [5000.0, 0.0, 14.4, 3.42, 16.3**2 - 14.5**2,  ]]
        for threshold, border, noise, dc, dc2, text in thislist:
            name = 'mean'
            cmd = 'python Image.py analyse {folder}/{name} "{fname}" --ohdu 3 --params-mode mean --remove-hits {threshold} {border} --plot-spectrum'\
                .format( fname=fname, folder=folder, name=name, threshold=threshold, border=border )
            print( cmd )
            func = lambda: subprocess.call( [cmd], shell=True )
            doc.set_func(func)
            pre = 'mean_e{threshold}b{border}'.format(threshold=threshold, border=border)
                            
            scale = .3
            doc.frame(
                '$E<{:.0f}$ADU (+{:.0f} border) spectra'.format(threshold,border), 
                doc.code( cmd, 'Bash'),
                doc.column(
                    doc.center( *figsSpectrum('mean', pre) ),
                    'estimations\n\n\
                    $$\sigma={noise}$$\n\
                    $$g\lambda={dc}$$\n\
                    $$g^2\lambda={dc2}$$\n\
                    $$g={g:.2f}$$\n\
                    $$\lambda={lamb:.2f}$$'.format(noise=noise, dc=dc, dc2=dc2, g=dc2/dc, lamb=dc**2/dc2)
                    +
                    text,
                    widths = [.7,-1]
                )
            )
        
        #with Timer('convolution'):
            #threshold = 100.0
            #border = 3.0
            #cmd = 'python Image.py analyse {folder}/{name} "{fname}" --ohdu 3 --params-mode mean --remove-hits {threshold} {border} --plot-convolution-spectrum'\
                #.format( fname=fname, folder=folder, name=name, threshold=threshold, border=border )
            #print( cmd )
            #func = lambda: subprocess.call( [cmd], shell=True )
            #doc.set_func(func)
            
            #pre = 'mean_e{threshold}b{border}'.format(threshold=threshold, border=border)
            #thislist = [[5, 64.6, 52, 77.1],
                        #[10, 127.6, 223.3, 165.7]]
            #for n, noise, dc, dc2 in thislist:
                #dc2 = (dc2**2 - noise**2)
                #doc.frame('convolution sum {D}x{D} $E<{:.0f}$(+{:.0f})'.format(threshold,border,D=n), 
                    #doc.code( cmd, 'Bash'),
                    #doc.column(
                        #doc.center( *figsSpectrum('mean', pre, kind='_convolution%d'%n) ),
                    #'estimations\n\n\
                    #$$\sigma={noise}$$\n\
                    #$$g\lambda={dc}$$\n\
                    #$$g^2\lambda={dc2}$$\n\
                    #$$g={g:.2f}$$\n\
                    #$$\lambda={lamb:.2f}$$'.format(noise=noise, dc=dc, dc2=dc2, g=dc2/dc, lamb=dc**2/dc2),
                        #widths=[.7,-1] )
                #)

        with Timer('blocks'):
            threshold = 100.0
            border = 3.0

            gl5 = 2.54
            sig5 = 14
            g2l5 = 14.8**2-sig5**2
            
            gl10 = 2.55
            sig10 = 14.3
            g2l10 = 15.2**2-sig10**2

            blocks = [
                ['blockmean', 'np.nanmean(x)', 'mean', 5, '$$g\lambda={}$$'.format(gl5)], 
                ['blockstd', '(lambda y: np.nan if y==0 else y)(np.nanstd(x))', 'std', 5, 
                 '$$\sigma={}$$\n$$g^2\lambda={:.0f}$$\n$$g={:.2f}$$\n$$\lambda={:.2f}$$'.format(sig5, g2l5, g2l5/gl5, gl5**2/g2l5 ) ],
                ['blockmean', 'np.nanmean(x)', 'mean', 10,  '$$g\lambda={}$$'.format(gl10)],
                ['blockstd', '(lambda y: np.nan if y==0 else y)(np.nanstd(x))', 'std', 10, 
                 '$$\sigma={}$$\n$$g^2\lambda={:.0f}$$\n$$g={:.2f}$$\n$$\lambda={:.2f}$$'.format(sig10, g2l10, g2l10/gl10, gl10**2/g2l10 )],
                    ]
            for _name_, _func_, funclabel, D, text in blocks:
                cmd = 'python Image.py analyse {folder}/{name} "{fname}" --ohdu 3 --params-mode mean --remove-hits {threshold} {border} --plot-block-spectrum --block-function "{_func_}"'\
                    .format( fname=fname, folder=folder, name=_name_, threshold=threshold, border=border, _func_=_func_ )
                print( cmd )
                func = lambda: subprocess.call( [cmd], shell=True )
                doc.set_func(func)
                
                pre = 'mean_e{threshold}b{border}'.format(threshold=threshold, border=border)
                doc.frame('{funclabel} block {D}x{D} $E<{:.0f}$ADU (+{:.0f})'.format(threshold,border,funclabel=funclabel,D=D), 
                    doc.code( cmd, 'Bash'),
                    doc.column(
                        doc.center( *figsSpectrum(_name_, pre, kind='_block%d'%D) ),
                        text,
                        widths=[.7,-1] ))

        with Timer('evolution'):
            threshold = 100.0
            border = 3.0
            _name_ = 'dcevo'
            cmd = 'python Image.py analyse {folder}/{name} "{fname}" --ohdu 3 --params-mode mean --remove-hits {threshold} {border} --plot-sections'\
                .format( fname=fname, folder=folder, name=_name_, threshold=threshold, border=border )
            print( cmd )
            func = lambda: subprocess.call( [cmd], shell=True )
            doc.set_func(func)
            
            pre = 'mean_e{threshold}b{border}'.format(threshold=threshold, border=border)
            doc.frame('evolution of DC through time $E<{}$ADU (+{})'.format(threshold,border), 
                doc.code( cmd, 'Bash'),
                doc.column(
                    doc.center( *figsProj('dcevo', pre ) ),
                    '',
                    widths = [.7,1]))
                    
        fname = r'/share/storage2/connie/data/runs/*/runID_*_12000_*_p*.fits.fz'
        with Timer():
            name = 'median1x5'
            cmd = 'python Image.py analyse {folder}/{name} "{fname}" --ohdu 3 --plot-sections --plot-spectrum'\
                .format( name=name, fname=fname, folder=folder)
            print( cmd )
            func = lambda: subprocess.call( [cmd], shell=True )
            
            scale = 1.2
            optsSection = [['data',1*scale], ['bias',.25*scale], ['vbias',1*scale], ['dbias',.15*scale] ]
            doc.frame('1x5 ', 
                    doc.code( cmd, 'Bash'),
                    doc.center( *figsSection(name, 'median', optsSection=optsSection) )
                    )
            
            text = ''
            doc.frame('projections of the raw image', 
                    doc.code( cmd, 'Bash'),
                    doc.column(
                        doc.center( *figsProj(name, 'median') ),
                        text,
                        widths=[.7,-1] ))

            text = ''
            doc.frame('spectra of the raw image', 
                    'distributions are crowded with outliers',
                    doc.code( cmd, 'Bash'),
                    doc.column(
                        doc.center( *figsSpectrum(name, 'median') ),
                        text,
                        widths=[.7,-1] ))

        with Timer('evolution'):
            threshold = 100.0
            border = 3.0
            _name_ = 'dcevo1x5'
            cmd = 'python Image.py analyse {folder}/{name} "{fname}" --ohdu 3 --params-mode mean --remove-hits {threshold} {border} --plot-sections --plot-spectrum'\
                .format( fname=fname, folder=folder, name=_name_, threshold=threshold, border=border )
            print( cmd )
            func = lambda: subprocess.call( [cmd], shell=True )
            doc.set_func(func)

            doc.frame('1x5 spectra with line and col corrections 1x5', 
                doc.code( cmd, 'Bash'),
                doc.column(
                        doc.center( *figsSpectrum('dcevo1x5', pre, kind='_spectrum') ),
                        text,
                        widths=[.7,-1]
                    ))
            
            pre = 'mean_e{threshold}b{border}'.format(threshold=threshold, border=border)
            doc.frame('1x5 evolution of DC $E<{}$ADU (+{})'.format(threshold,border), 
                doc.code( cmd, 'Bash'),
                doc.column(
                    doc.center( *figsProj('dcevo1x5', pre ) ),
                    '',
                    widths = [.7,1]))


        with Timer('blocks'):
            threshold = 100.0
            border = 3.0
            thislist = [
                ['blockmean1x5', 'np.nanmean(x)',5], 
                ['blockstd1x5', '(lambda y: np.nan if y==0 else y)(np.nanstd(x))',5],
                ['blockmean1x5', 'np.nanmean(x)',10], 
                ['blockstd1x5', '(lambda y: np.nan if y==0 else y)(np.nanstd(x))',10],
                ]
            for _name_, _func_, D in thislist:
                cmd = 'python Image.py analyse {folder}/{name} "{fname}" --ohdu 3 --params-mode mean --remove-hits {threshold} {border} --plot-block-spectrum --block-function "{_func_}"'\
                    .format( fname=fname, folder=folder, name=_name_, threshold=threshold, border=border, _func_=_func_ )
                print( cmd )
                func = lambda: subprocess.call( [cmd], shell=True )
                doc.set_func(func)
                
                pre = 'mean_e{threshold}b{border}'.format(threshold=threshold, border=border)
                scale = .3
                doc.frame('1x5 block {D}x{D} $E<{}$ADU (+{})'.format(threshold,border,D=D), 
                doc.code( cmd, 'Bash'),
                    doc.column(
                        doc.center( *figsSpectrum(_name_, pre, kind='_block%d'%D) ),
                        text,
                        widths=[.7,-1] ))
                


